// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: session.sql

package db

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    uuid, login_id, created_at, expires_at
) VALUES (
    ?, ?, ?, ?
)
RETURNING id, uuid, login_id, created_at, expires_at
`

type CreateSessionParams struct {
	Uuid      string
	LoginID   string
	CreatedAt time.Time
	ExpiresAt time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.Uuid,
		arg.LoginID,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.LoginID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = ?
`

func (q *Queries) DeleteSession(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, uuid, login_id, created_at, expires_at FROM sessions
WHERE uuid = ? LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, uuid string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, uuid)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.LoginID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getSessionById = `-- name: GetSessionById :one
SELECT id, uuid, login_id, created_at, expires_at FROM sessions
WHERE id = ? LIMIT 1
`

func (q *Queries) GetSessionById(ctx context.Context, id int64) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionById, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.LoginID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
